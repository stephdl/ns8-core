#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it[]
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import agent
import agent.tasks
import os
import sys
import json
import smtplib
import ssl


data = json.load(sys.stdin)

# do not validate if enabled is false
enabled = data['enabled']
if not enabled:
    sys.exit(0)

port =  int(data['port'])
host = data['host']
username = data['username']
password = data['password']
tls = data['tls']
tls_verify = data['tls_verify']


# verify the hostname and the certificate
ctx = ssl.create_default_context()
if tls_verify:
    ctx.check_hostname = True
    ctx.verify_mode = ssl.CERT_REQUIRED
else:
    ctx.check_hostname = False
    ctx.verify_mode = ssl.CERT_NONE

try :
    smtp = smtplib.SMTP(host, port=port, timeout=10)
    # Enable starttls
    if tls:
        smtp.starttls(context=ctx)
    # we have a login, we try to authenticate.
    if username:
        smtp.login(username, password)
    # without authentication, we have now way to test except 
    # to connect to the server. we quit
    smtp.quit()

except smtplib.SMTPAuthenticationError as err:
    agent.set_status('validation-failed')
    # probably name or password failure
    json.dump([{'field':'test_smarthost','parameter':'test_smarthost','value':err,'error':'cannot_authenticate_to_server'}],fp=sys.stdout, default=str)
    sys.exit(2)

except smtplib.SMTPConnectError as err:
    agent.set_status('validation-failed')
    # any connection error to the server
    json.dump([{'field':'test_smarthost','parameter':'test_smarthost','value':err,'error':'cannot_connect_to_server'}],fp=sys.stdout, default=str)
    sys.exit(3)

except smtplib.SMTPNotSupportedError as err:
    agent.set_status('validation-failed')
    # probably need to use starttls
    json.dump([{'field':'test_smarthost','parameter':'test_smarthost','value':err,'error':'connection_not_supported_by_server'}],fp=sys.stdout, default=str)
    sys.exit(4)

except ssl.SSLCertVerificationError as err:
    agent.set_status('validation-failed')
    # the certificate is not valid probably self-signed or not valid for this hostname
    json.dump([{'field':'test_smarthost','parameter':'test_smarthost','value':err,'error':'valid_certificate_verification_error'}],fp=sys.stdout, default=str)
    sys.exit(5)
